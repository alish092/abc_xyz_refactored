
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
from config.column_schema import StandardColumns
from core.file_loader import load_stock
from core.load_sales_detailed import load_sales_detailed
from core.analyzer import ABCAnalyzer, XYZAnalyzer
from config.schema import AppConfig

class AppGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title('ABC/XYZ-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä')
        self.root.geometry('1000x600')

        self.sales_path = None
        self.stock_path = None
        self.df = pd.DataFrame()

        self.config = AppConfig()
        self.abc_analyzer = ABCAnalyzer(self.config.thresholds)
        self.xyz_analyzer = XYZAnalyzer(self.config.thresholds)

        self.setup_widgets()

    def sort_by_column(self, col):
        reverse = getattr(self, 'sort_reverse', {}).get(col, False)
        self.df = self.df.sort_values(by=col, ascending=not reverse)
        self.sort_reverse = {col: not reverse}
        self.update_table()

    def setup_widgets(self):
        top_frame = tk.Frame(self.root)
        top_frame.pack(pady=10)

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        tk.Button(top_frame, text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏', command=self.load_sales_file).grid(row=0, column=0, padx=10)
        tk.Button(top_frame, text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏', command=self.load_stock_file).grid(row=0, column=1, padx=10)
        tk.Button(top_frame, text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', command=self.try_analyze).grid(row=0, column=2, padx=10)
        tk.Button(top_frame, text='üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel', command=self.save_to_excel).grid(row=0, column=3, padx=10)

        # –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
        search_frame = tk.Frame(self.root)
        search_frame.pack(pady=(0, 10))

        tk.Label(search_frame, text='üîç –ü–æ–∏—Å–∫:').pack(side='left', padx=(0, 5))
        self.search_entry = tk.Entry(search_frame, width=30)
        self.search_entry.pack(side='left', padx=(0, 10))
        self.search_entry.bind('<KeyRelease>', self.on_search)

        tk.Button(search_frame, text='–û—á–∏—Å—Ç–∏—Ç—å', command=self.clear_search).pack(side='left', padx=(0, 10))

        # –°—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.search_label = tk.Label(search_frame, text='')
        self.search_label.pack(side='left')

        self.status_label = tk.Label(self.root, text='üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
        self.status_label.pack()

        tree_frame = tk.Frame(self.root)
        tree_frame.pack(expand=True, fill='both')

        scrollbar = ttk.Scrollbar(tree_frame, orient='vertical')
        scrollbar.pack(side='right', fill='y')
        h_scrollbar = ttk.Scrollbar(tree_frame, orient='horizontal')
        h_scrollbar.pack(side='bottom', fill='x')

        self.tree = ttk.Treeview(
            tree_frame,
            columns=['–ê—Ä—Ç–∏–∫—É–ª', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–°—É–º–º–∞', 'ABC', 'XYZ', '–û—Å—Ç–∞—Ç–æ–∫', 'ABC_XYZ', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'],
            show='headings',
            yscrollcommand=scrollbar.set,
            xscrollcommand=h_scrollbar.set,
            selectmode='none'
        )
        scrollbar.config(command=self.tree.yview)
        h_scrollbar.config(command=self.tree.xview)

        for col in ['–ê—Ä—Ç–∏–∫—É–ª', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–°—É–º–º–∞', 'ABC', 'XYZ', '–û—Å—Ç–∞—Ç–æ–∫', 'ABC_XYZ', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']:
            self.tree.heading(col, text=col, command=lambda _col=col: self.sort_by_column(_col))
            self.tree.column(col, width=130)

        self.tree.pack(expand=True, fill='both')

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        style = ttk.Style()
        style.map("Treeview",
                  background=[('selected', ''), ('active', '')],
                  foreground=[('selected', ''), ('active', '')])

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.tree.bind("<Button-1>", self.on_cell_click)
        self.tree.bind("<Control-c>", self.copy_cell_to_clipboard)
        self.tree.bind("<Escape>", self.clear_cell_selection)  # –î–æ–±–∞–≤–ª—è–µ–º Escape –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.tree.bind("<Button-3>", self.clear_cell_selection)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
        self.selected_item = None
        self.selected_column = None
        self.selection_tags = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.highlighted_items = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.original_df = pd.DataFrame()
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É", command=self.copy_cell_to_clipboard)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="‚ùå –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ", command=self.clear_cell_selection)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é
        self.tree.bind("<Button-3>", self.show_context_menu)

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª—è–µ–º —è—á–µ–π–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        self.on_cell_click(event)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
            
    def on_cell_click(self, event):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤—ã–¥–µ–ª—è–µ—Ç —è—á–µ–π–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∫–ª–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        self.clear_cell_selection()

        item = self.tree.identify('item', event.x, event.y)
        column = self.tree.identify('column', event.x, event.y)

        if item and column:
            self.selected_item = item
            self.selected_column = column

            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏
            self.highlight_cell(item, column)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—á–µ–π–∫–µ
            col_names = ['–ê—Ä—Ç–∏–∫—É–ª', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–°—É–º–º–∞', 'ABC', 'XYZ', '–û—Å—Ç–∞—Ç–æ–∫', 'ABC_XYZ', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']
            col_index = int(column.replace('#', '')) - 1

            if 0 <= col_index < len(col_names):
                col_name = col_names[col_index]
                cell_value = self.tree.item(item)['values'][col_index]

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                current_status = self.status_label.cget('text')
                if '|' in current_status:
                    base_status = current_status.split('|')[0].strip()
                else:
                    base_status = current_status

                self.status_label.config(text=f'{base_status} | üìç –í—ã–¥–µ–ª–µ–Ω–æ: {col_name} = {cell_value} (Escape - —Å–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ)')

    def highlight_cell(self, item, column):
        """–í–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–≥–∏"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
        tag_name = f"selected_{item}_{column}"

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
        self.tree.tag_configure(tag_name, background='lightblue', foreground='black')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–≥ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
        current_tags = list(self.tree.item(item, 'tags'))
        current_tags.append(tag_name)
        self.tree.item(item, tags=current_tags)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        self.selection_tags.append((item, tag_name))

    def clear_cell_selection(self, event=None):
        """–û—á–∏—â–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        for item, tag_name in self.selection_tags:
            try:
                current_tags = list(self.tree.item(item, 'tags'))
                if tag_name in current_tags:
                    current_tags.remove(tag_name)
                    self.tree.item(item, tags=current_tags)
            except tk.TclError:
                # –≠–ª–µ–º–µ–Ω—Ç –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
                pass

        self.selection_tags.clear()
        self.selected_item = None
        self.selected_column = None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, —É–±–∏—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
        current_status = self.status_label.cget('text')
        if '|' in current_status:
            base_status = current_status.split('|')[0].strip()
            self.status_label.config(text=base_status)

    def copy_cell_to_clipboard(self, event=None):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if self.selected_item and self.selected_column:
            try:
                col_index = int(self.selected_column.replace('#', '')) - 1
                values = self.tree.item(self.selected_item)['values']

                if 0 <= col_index < len(values):
                    cell_value = str(values[col_index])

                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    self.root.clipboard_clear()
                    self.root.clipboard_append(cell_value)

                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                    try:
                        self.root.update_idletasks()
                        self.root.update()
                    except:
                        pass

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    col_names = ['–ê—Ä—Ç–∏–∫—É–ª', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–°—É–º–º–∞', 'ABC', 'XYZ', '–û—Å—Ç–∞—Ç–æ–∫', 'ABC_XYZ', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']
                    col_name = col_names[col_index] if col_index < len(col_names) else '–ó–Ω–∞—á–µ–Ω–∏–µ'

                    # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    original_status = self.status_label.cget('text')
                    self.status_label.config(text=f'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {cell_value}')
                    self.root.after(2000, lambda: self.status_label.config(text=original_status))

            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                original_status = self.status_label.cget('text')
                self.status_label.config(text=f'‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}')
                self.root.after(3000, lambda: self.status_label.config(text=original_status))
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            original_status = self.status_label.cget('text')
            self.status_label.config(text='‚ùå –°–Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è')
            self.root.after(2000, lambda: self.status_label.config(text=original_status))

    def copy_selection_to_clipboard(self, event=None):
        selection = self.tree.selection()
        if not selection:
            return

        rows = []
        for item in selection:
            values = self.tree.item(item)['values']
            rows.append('\t'.join(str(v) for v in values))

        self.root.clipboard_clear()
        self.root.clipboard_append('\n'.join(rows))
        self.root.update()  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –û–°

    def on_search(self, event=None):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        if self.original_df.empty:
            return

        query = self.search_entry.get().lower().strip()

        if not query:
            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            self.df = self.original_df.copy()
            self.update_table()
            self.search_label.config(text='')
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        mask = (
                self.original_df[StandardColumns.ARTIKUL].astype(str).str.lower().str.contains(query, na=False) |
                self.original_df[StandardColumns.NOMENCLATURA].astype(str).str.lower().str.contains(query, na=False) |
                self.original_df.get(StandardColumns.ABC, pd.Series(dtype=str)).astype(str).str.lower().str.contains(
                    query, na=False) |
                self.original_df.get(StandardColumns.XYZ, pd.Series(dtype=str)).astype(str).str.lower().str.contains(
                    query, na=False) |
                self.original_df.get('ABC_XYZ', pd.Series(dtype=str)).astype(str).str.lower().str.contains(query,
                                                                                                           na=False) |
                self.original_df.get('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', pd.Series(dtype=str)).astype(str).str.lower().str.contains(query,
                                                                                                                na=False)
        )

        self.df = self.original_df[mask].copy()
        self.update_table()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        found_count = len(self.df)
        total_count = len(self.original_df)
        self.search_label.config(text=f'–ù–∞–π–¥–µ–Ω–æ: {found_count} –∏–∑ {total_count}')

    def load_sales_file(self):
        path = filedialog.askopenfilename(filetypes=[('Excel Files', '*.xlsx')])
        if path:
            try:
                load_sales_detailed(path)
                self.sales_path = path
                self.status_label.config(text='‚úÖ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            except Exception as e:
                messagebox.showerror('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂', str(e))

    def load_stock_file(self):
        path = filedialog.askopenfilename(filetypes=[('Excel Files', '*.xlsx')])
        if path:
            try:
                load_stock(path)
                self.stock_path = path
                self.status_label.config(text='‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            except Exception as e:
                messagebox.showerror('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤', str(e))

    def clear_search(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–∏—Å–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        self.search_entry.delete(0, tk.END)
        if not self.original_df.empty:
            self.df = self.original_df.copy()
            self.update_table()
            self.search_label.config(text='')

    def try_analyze(self):
        if not self.sales_path or not self.stock_path:
            return

        try:
            sales = load_sales_detailed(self.sales_path)
            stock = load_stock(self.stock_path)

            # ABC-–∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            abc_df = sales.groupby([
                StandardColumns.ARTIKUL,
                StandardColumns.NOMENCLATURA
            ])[StandardColumns.SUMMA].sum().reset_index()
            abc_df = self.abc_analyzer.analyze(abc_df)

            # XYZ-–∞–Ω–∞–ª–∏–∑ (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
            monthly_sales = sales.groupby([
                StandardColumns.ARTIKUL,
                StandardColumns.NOMENCLATURA,
                "–ú–µ—Å—è—Ü"
            ])[StandardColumns.SUMMA].sum().reset_index()

            stats = monthly_sales.groupby([
                StandardColumns.ARTIKUL,
                StandardColumns.NOMENCLATURA
            ])[StandardColumns.SUMMA].agg(['mean', 'std', 'count']).reset_index()

            xyz_df = self.xyz_analyzer.analyze(stats)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            df = pd.merge(
                abc_df,
                xyz_df[[StandardColumns.ARTIKUL, StandardColumns.NOMENCLATURA, StandardColumns.XYZ]],
                on=[StandardColumns.ARTIKUL, StandardColumns.NOMENCLATURA],
                how='left'
            )
            df = pd.merge(
                df,
                stock[[StandardColumns.ARTIKUL, StandardColumns.OSTATOK]],
                on=StandardColumns.ARTIKUL,
                how='left'
            )
            df[StandardColumns.OSTATOK] = df[StandardColumns.OSTATOK].fillna(0)

        except Exception as e:
            messagebox.showerror('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞', str(e))
            return

        df['ABC_XYZ'] = df[StandardColumns.ABC] + df[StandardColumns.XYZ]

        def get_recommendation(code):
            match code:
                case 'AX':
                    return '–î–µ—Ä–∂–∏–º –∫–∞–∫ –∑–µ–Ω–∏—Ü—É –æ–∫–∞. –ü—Ä–æ–¥–∞—ë—Ç—Å—è –æ—Ç–ª–∏—á–Ω–æ ‚Äî –ø—É—Å—Ç—å –ª–µ–∂–∏—Ç.'
                case 'AY' | 'AZ':
                    return '–•–∏—Ç—Ä—ã–π –ø–∞—Ä–µ–Ω—å: —Å–ø—Ä–æ—Å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π. –ó–∞–ø–∞—Å ‚Äî –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.'
                case 'BX':
                    return '–ù–æ—Ä–º, –Ω–æ –Ω–µ —à–∏–∫. –ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–π.'
                case 'BY' | 'BZ':
                    return '–ù–∏ —Ä—ã–±–∞, –Ω–∏ –º—è—Å–æ. –ü–æ–Ω–∞–±–ª—é–¥–∞–π.'
                case 'CX':
                    return '–≠–π, —Ç—ã —á–µ–≥–æ —Ç—É—Ç –¥–µ–ª–∞–µ—à—å? –£–±–∏—Ä–∞–µ–º –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.'
                case 'CY' | 'CZ':
                    return '–°–µ—Ä—å—ë–∑–Ω–æ? –≠—Ç–æ –µ—â—ë –∂–∏–≤–æ? –ê–∫—Ü–∏–∏, —É—Ü–µ–Ω–∫–∞, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞!'
                case _:
                    return '¬Ø\_(„ÉÑ)_/¬Ø –ù—É–∂–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.'

        df['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'] = df['ABC_XYZ'].apply(get_recommendation)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.original_df = df.copy()
        self.df = df
        self.update_table()
        self.status_label.config(text=f'‚úÖ –ì–æ—Ç–æ–≤–æ: {len(df)} –ø–æ–∑–∏—Ü–∏–π')

        def get_recommendation(code):
            match code:
                case 'AX':
                    return '–î–µ—Ä–∂–∏–º –∫–∞–∫ –∑–µ–Ω–∏—Ü—É –æ–∫–∞. –ü—Ä–æ–¥–∞—ë—Ç—Å—è –æ—Ç–ª–∏—á–Ω–æ ‚Äî –ø—É—Å—Ç—å –ª–µ–∂–∏—Ç.'
                case 'AY' | 'AZ':
                    return '–•–∏—Ç—Ä—ã–π –ø–∞—Ä–µ–Ω—å: —Å–ø—Ä–æ—Å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π. –ó–∞–ø–∞—Å ‚Äî –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.'
                case 'BX':
                    return '–ù–æ—Ä–º, –Ω–æ –Ω–µ —à–∏–∫. –ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–π.'
                case 'BY' | 'BZ':
                    return '–ù–∏ —Ä—ã–±–∞, –Ω–∏ –º—è—Å–æ. –ü–æ–Ω–∞–±–ª—é–¥–∞–π.'
                case 'CX':
                    return '–≠–π, —Ç—ã —á–µ–≥–æ —Ç—É—Ç –¥–µ–ª–∞–µ—à—å? –£–±–∏—Ä–∞–µ–º –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.'
                case 'CY' | 'CZ':
                    return '–°–µ—Ä—å—ë–∑–Ω–æ? –≠—Ç–æ –µ—â—ë –∂–∏–≤–æ? –ê–∫—Ü–∏–∏, —É—Ü–µ–Ω–∫–∞, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞!'
                case _:
                    return '¬Ø\_(„ÉÑ)_/¬Ø –ù—É–∂–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.'

        df['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'] = df['ABC_XYZ'].apply(get_recommendation)
        self.df = df
        self.update_table()
        self.status_label.config(text=f'‚úÖ –ì–æ—Ç–æ–≤–æ: {len(df)} –ø–æ–∑–∏—Ü–∏–π')

    def update_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ –æ—á–∏—â–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ"""
        # –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.clear_cell_selection()
        self.selected_item = None
        self.selected_column = None

        self.tree.delete(*self.tree.get_children())
        for _, row in self.df.iterrows():
            values = [
                row[StandardColumns.ARTIKUL],
                row[StandardColumns.NOMENCLATURA],
                f"{row[StandardColumns.SUMMA]:,.0f}".replace(',', ' '),  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                row[StandardColumns.ABC],
                row[StandardColumns.XYZ],
                f"{row[StandardColumns.OSTATOK]:,.0f}".replace(',', ' '),  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                row.get('ABC_XYZ', ''),
                row.get('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', '')
            ]
            self.tree.insert('', 'end', values=values)

    def save_to_excel(self):
        if self.df.empty:
            messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")
            return

        path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx")])
        if path:
            try:
                self.df.to_excel(path, index=False)
                messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", str(e))

    def run(self):
        self.root.mainloop()

def run_app():
    AppGUI().run()
